// Mocks generated by Mockito 5.4.4 from annotations
// in trip_tally/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:io' as _i26;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i23;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i25;
import 'package:permission_handler/permission_handler.dart' as _i37;
import 'package:shared_preferences/shared_preferences.dart' as _i6;
import 'package:trip_tally/data/api/api_client.dart' as _i24;
import 'package:trip_tally/data/api/osm_client.dart' as _i42;
import 'package:trip_tally/data/dto/osm_map/osm_response_dto.dart' as _i10;
import 'package:trip_tally/data/dto/trips/create_trip_dto.dart' as _i27;
import 'package:trip_tally/data/dto/user/create_account_dto.dart' as _i20;
import 'package:trip_tally/data/dto/user/login_dto.dart' as _i19;
import 'package:trip_tally/data/dto/user/update_user_profile_dto.dart' as _i21;
import 'package:trip_tally/domain/data_source/authentication_remote_source.dart' as _i18;
import 'package:trip_tally/domain/data_source/osm_map_data_source.dart' as _i41;
import 'package:trip_tally/domain/data_source/trips_data_source.dart' as _i30;
import 'package:trip_tally/domain/entities/osm_map/place_entity.dart' as _i39;
import 'package:trip_tally/domain/entities/trips/create_trip_entity.dart' as _i32;
import 'package:trip_tally/domain/entities/user/create_account_entity.dart' as _i16;
import 'package:trip_tally/domain/entities/user/login_entity.dart' as _i15;
import 'package:trip_tally/domain/entities/user/update_user_profile_entity.dart' as _i17;
import 'package:trip_tally/domain/repositories/authentication_repo.dart' as _i12;
import 'package:trip_tally/domain/repositories/osm_map_repository.dart' as _i40;
import 'package:trip_tally/domain/repositories/trips_repo.dart' as _i31;
import 'package:trip_tally/domain/use_case/create_account_use_case.dart' as _i28;
import 'package:trip_tally/domain/use_case/create_trip_use_case.dart' as _i33;
import 'package:trip_tally/domain/use_case/location_suggestions_use_case.dart' as _i38;
import 'package:trip_tally/domain/use_case/login_use_case.dart' as _i22;
import 'package:trip_tally/domain/use_case/update_user_profile_use_case.dart' as _i43;
import 'package:trip_tally/domain/utils/failure.dart' as _i14;
import 'package:trip_tally/domain/utils/shared_prefs_utils.dart' as _i29;
import 'package:trip_tally/domain/utils/success.dart' as _i3;
import 'package:trip_tally/presentation/pages/authentication_page/bloc/authentication_bloc.dart' as _i5;
import 'package:trip_tally/presentation/pages/new_trip_page/bloc/new_trip_bloc.dart' as _i34;
import 'package:trip_tally/presentation/pages/new_trip_page/bloc/new_trip_event.dart' as _i35;
import 'package:trip_tally/presentation/pages/new_trip_page/bloc/new_trip_state.dart' as _i7;
import 'package:trip_tally/presentation/pages/registration_page/bloc/registration_bloc.dart' as _i4;
import 'package:trip_tally/presentation/pages/welcome_page/bloc/update_user_profile_bloc.dart' as _i11;
import 'package:trip_tally/presentation/utils/permissions/bloc/permissions_bloc.dart' as _i8;
import 'package:trip_tally/presentation/utils/permissions/permission_service.dart' as _i36;
import 'package:trip_tally/presentation/widgets/m3_widgets/maps/osm_bloc/osm_suggestions_cubit.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuccess_1 extends _i1.SmartFake implements _i3.Success {
  _FakeSuccess_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegistrationState_2 extends _i1.SmartFake implements _i4.RegistrationState {
  _FakeRegistrationState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationState_3 extends _i1.SmartFake implements _i5.AuthenticationState {
  _FakeAuthenticationState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_4 extends _i1.SmartFake implements _i6.SharedPreferences {
  _FakeSharedPreferences_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNewTripState_5 extends _i1.SmartFake implements _i7.NewTripState {
  _FakeNewTripState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePermissionsState_6 extends _i1.SmartFake implements _i8.PermissionsState {
  _FakePermissionsState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOsmSuggestionsState_7 extends _i1.SmartFake implements _i9.OsmSuggestionsState {
  _FakeOsmSuggestionsState_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOsmResponseDto_8 extends _i1.SmartFake implements _i10.OsmResponseDto {
  _FakeOsmResponseDto_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateUserProfileState_9 extends _i1.SmartFake implements _i11.UpdateUserProfileState {
  _FakeUpdateUserProfileState_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepo extends _i1.Mock implements _i12.AuthenticationRepo {
  MockAuthenticationRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> login(_i15.LoginEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #login,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> createAccount(_i16.CreateAccountEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #createAccount,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> updateUserProfile(_i17.UpdateUserProfileEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #updateUserProfile,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);
}

/// A class which mocks [AuthenticationRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRemoteSource extends _i1.Mock implements _i18.AuthenticationRemoteSource {
  MockAuthenticationRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Success> login(_i19.LoginDto? loginDto) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginDto],
        ),
        returnValue: _i13.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #login,
            [loginDto],
          ),
        )),
      ) as _i13.Future<_i3.Success>);

  @override
  _i13.Future<_i3.Success> createAccount(_i20.CreateAccountDto? createUserDto) => (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [createUserDto],
        ),
        returnValue: _i13.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #createAccount,
            [createUserDto],
          ),
        )),
      ) as _i13.Future<_i3.Success>);

  @override
  _i13.Future<_i3.Success> updateUserProfile(_i21.UpdateUserProfileDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [dto],
        ),
        returnValue: _i13.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #updateUserProfile,
            [dto],
          ),
        )),
      ) as _i13.Future<_i3.Success>);

  @override
  _i13.Future<_i3.Success> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i13.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i13.Future<_i3.Success>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i22.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> call(_i15.LoginEntity? loginEntity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [loginEntity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [loginEntity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);
}

/// A class which mocks [RegistrationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegistrationBloc extends _i1.Mock implements _i4.RegistrationBloc {
  MockRegistrationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.RegistrationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRegistrationState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.RegistrationState);

  @override
  _i13.Stream<_i4.RegistrationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i4.RegistrationState>.empty(),
      ) as _i13.Stream<_i4.RegistrationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i4.RegistrationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i4.RegistrationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.RegistrationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i4.RegistrationEvent>(
    _i23.EventHandler<E, _i4.RegistrationState>? handler, {
    _i23.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i23.Transition<_i4.RegistrationEvent, _i4.RegistrationState>? transition) => super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i23.Change<_i4.RegistrationState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock implements _i5.AuthenticationBloc {
  MockAuthenticationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AuthenticationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthenticationState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.AuthenticationState);

  @override
  _i13.Stream<_i5.AuthenticationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i5.AuthenticationState>.empty(),
      ) as _i13.Stream<_i5.AuthenticationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i5.AuthenticationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i5.AuthenticationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.AuthenticationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i5.AuthenticationEvent>(
    _i23.EventHandler<E, _i5.AuthenticationState>? handler, {
    _i23.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i23.Transition<_i5.AuthenticationEvent, _i5.AuthenticationState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i23.Change<_i5.AuthenticationState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i24.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<String> login(_i19.LoginDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [dto],
        ),
        returnValue: _i13.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #login,
            [dto],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<String> createAccount(_i20.CreateAccountDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [dto],
        ),
        returnValue: _i13.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #createAccount,
            [dto],
          ),
        )),
      ) as _i13.Future<String>);

  @override
  _i13.Future<void> updateUserProfile({
    required String? username,
    required String? country,
    required String? defaultCurrencyCode,
    _i26.File? profilePicture,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #username: username,
            #country: country,
            #defaultCurrencyCode: defaultCurrencyCode,
            #profilePicture: profilePicture,
          },
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<void> addTrip(_i27.CreateTripDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #addTrip,
          [dto],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  _i13.Future<String> exampleDelete() => (super.noSuchMethod(
        Invocation.method(
          #exampleDelete,
          [],
        ),
        returnValue: _i13.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #exampleDelete,
            [],
          ),
        )),
      ) as _i13.Future<String>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i6.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i13.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [CreateAccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateAccountUseCase extends _i1.Mock implements _i28.CreateAccountUseCase {
  MockCreateAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> call(_i16.CreateAccountEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);
}

/// A class which mocks [SharedPrefsUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefsUtils extends _i1.Mock implements _i29.SharedPrefsUtils {
  MockSharedPrefsUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_4(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i6.SharedPreferences);

  @override
  _i13.Future<bool> get removeToken => (super.noSuchMethod(
        Invocation.getter(#removeToken),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [TripsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripsDataSource extends _i1.Mock implements _i30.TripsDataSource {
  MockTripsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i3.Success> createTrip(_i27.CreateTripDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #createTrip,
          [dto],
        ),
        returnValue: _i13.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #createTrip,
            [dto],
          ),
        )),
      ) as _i13.Future<_i3.Success>);
}

/// A class which mocks [TripsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripsRepo extends _i1.Mock implements _i31.TripsRepo {
  MockTripsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> createTrip(_i32.CreateTripEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #createTrip,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #createTrip,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);
}

/// A class which mocks [CreateTripUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTripUseCase extends _i1.Mock implements _i33.CreateTripUseCase {
  MockCreateTripUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> call(_i32.CreateTripEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);
}

/// A class which mocks [NewTripBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewTripBloc extends _i1.Mock implements _i34.NewTripBloc {
  MockNewTripBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.NewTripState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNewTripState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.NewTripState);

  @override
  _i13.Stream<_i7.NewTripState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i7.NewTripState>.empty(),
      ) as _i13.Stream<_i7.NewTripState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i35.NewTripEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i35.NewTripEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.NewTripState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i35.NewTripEvent>(
    _i23.EventHandler<E, _i7.NewTripState>? handler, {
    _i23.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i23.Transition<_i35.NewTripEvent, _i7.NewTripState>? transition) => super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i23.Change<_i7.NewTripState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PermissionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsService extends _i1.Mock implements _i36.PermissionsService {
  MockPermissionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i37.PermissionStatus> status(_i37.Permission? permission) => (super.noSuchMethod(
        Invocation.method(
          #status,
          [permission],
        ),
        returnValue: _i13.Future<_i37.PermissionStatus>.value(_i37.PermissionStatus.denied),
      ) as _i13.Future<_i37.PermissionStatus>);

  @override
  _i13.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i13.Future<bool>.value(false),
      ) as _i13.Future<bool>);

  @override
  _i13.Future<_i37.PermissionStatus> request(_i37.Permission? permission) => (super.noSuchMethod(
        Invocation.method(
          #request,
          [permission],
        ),
        returnValue: _i13.Future<_i37.PermissionStatus>.value(_i37.PermissionStatus.denied),
      ) as _i13.Future<_i37.PermissionStatus>);
}

/// A class which mocks [PermissionsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsBloc extends _i1.Mock implements _i8.PermissionsBloc {
  MockPermissionsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.PermissionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePermissionsState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i8.PermissionsState);

  @override
  _i13.Stream<_i8.PermissionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i8.PermissionsState>.empty(),
      ) as _i13.Stream<_i8.PermissionsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i8.PermissionsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.PermissionsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i8.PermissionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.PermissionsEvent>(
    _i23.EventHandler<E, _i8.PermissionsState>? handler, {
    _i23.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i23.Transition<_i8.PermissionsEvent, _i8.PermissionsState>? transition) => super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i23.Change<_i8.PermissionsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationSuggestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationSuggestionsUseCase extends _i1.Mock implements _i38.LocationSuggestionsUseCase {
  MockLocationSuggestionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, List<_i39.PlaceEntity>>> call(String? input) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, List<_i39.PlaceEntity>>>.value(
            _FakeEither_0<_i14.Failure, List<_i39.PlaceEntity>>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, List<_i39.PlaceEntity>>>);
}

/// A class which mocks [OsmSuggestionsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmSuggestionsCubit extends _i1.Mock implements _i9.OsmSuggestionsCubit {
  MockOsmSuggestionsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.OsmSuggestionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeOsmSuggestionsState_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.OsmSuggestionsState);

  @override
  _i13.Stream<_i9.OsmSuggestionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i9.OsmSuggestionsState>.empty(),
      ) as _i13.Stream<_i9.OsmSuggestionsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i13.Future<List<_i39.PlaceEntity>> getSuggestions(String? query) => (super.noSuchMethod(
        Invocation.method(
          #getSuggestions,
          [query],
        ),
        returnValue: _i13.Future<List<_i39.PlaceEntity>>.value(<_i39.PlaceEntity>[]),
      ) as _i13.Future<List<_i39.PlaceEntity>>);

  @override
  void emit(_i9.OsmSuggestionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i23.Change<_i9.OsmSuggestionsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);
}

/// A class which mocks [OsmMapRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmMapRepository extends _i1.Mock implements _i40.OsmMapRepository {
  MockOsmMapRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, List<_i39.PlaceEntity>>> getPlaces(String? input) => (super.noSuchMethod(
        Invocation.method(
          #getPlaces,
          [input],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, List<_i39.PlaceEntity>>>.value(
            _FakeEither_0<_i14.Failure, List<_i39.PlaceEntity>>(
          this,
          Invocation.method(
            #getPlaces,
            [input],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, List<_i39.PlaceEntity>>>);
}

/// A class which mocks [OsmMapDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmMapDataSource extends _i1.Mock implements _i41.OsmMapDataSource {
  MockOsmMapDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<List<_i10.FeatureDto>> getPlaces(String? input) => (super.noSuchMethod(
        Invocation.method(
          #getPlaces,
          [input],
        ),
        returnValue: _i13.Future<List<_i10.FeatureDto>>.value(<_i10.FeatureDto>[]),
      ) as _i13.Future<List<_i10.FeatureDto>>);
}

/// A class which mocks [OsmClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmClient extends _i1.Mock implements _i42.OsmClient {
  MockOsmClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i10.OsmResponseDto> getLocationSuggestions({
    required String? input,
    String? format = r'geojson',
    int? addressDetails = 1,
    int? limit = 5,
    String? acceptLanguage = r'en',
    int? polygonSvg = 1,
    int? extraTags = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationSuggestions,
          [],
          {
            #input: input,
            #format: format,
            #addressDetails: addressDetails,
            #limit: limit,
            #acceptLanguage: acceptLanguage,
            #polygonSvg: polygonSvg,
            #extraTags: extraTags,
          },
        ),
        returnValue: _i13.Future<_i10.OsmResponseDto>.value(_FakeOsmResponseDto_8(
          this,
          Invocation.method(
            #getLocationSuggestions,
            [],
            {
              #input: input,
              #format: format,
              #addressDetails: addressDetails,
              #limit: limit,
              #acceptLanguage: acceptLanguage,
              #polygonSvg: polygonSvg,
              #extraTags: extraTags,
            },
          ),
        )),
      ) as _i13.Future<_i10.OsmResponseDto>);
}

/// A class which mocks [UpdateUserProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserProfileUseCase extends _i1.Mock implements _i43.UpdateUserProfileUseCase {
  MockUpdateUserProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<_i2.Either<_i14.Failure, _i3.Success>> call(_i17.UpdateUserProfileEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>.value(_FakeEither_0<_i14.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [entity],
          ),
        )),
      ) as _i13.Future<_i2.Either<_i14.Failure, _i3.Success>>);
}

/// A class which mocks [UpdateUserProfileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserProfileBloc extends _i1.Mock implements _i11.UpdateUserProfileBloc {
  MockUpdateUserProfileBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.UpdateUserProfileState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUpdateUserProfileState_9(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.UpdateUserProfileState);

  @override
  _i13.Stream<_i11.UpdateUserProfileState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i13.Stream<_i11.UpdateUserProfileState>.empty(),
      ) as _i13.Stream<_i11.UpdateUserProfileState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i11.UpdateUserProfileEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.UpdateUserProfileEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i11.UpdateUserProfileState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.UpdateUserProfileEvent>(
    _i23.EventHandler<E, _i11.UpdateUserProfileState>? handler, {
    _i23.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i23.Transition<_i11.UpdateUserProfileEvent, _i11.UpdateUserProfileState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i13.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i13.Future<void>.value(),
        returnValueForMissingStub: _i13.Future<void>.value(),
      ) as _i13.Future<void>);

  @override
  void onChange(_i23.Change<_i11.UpdateUserProfileState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
