// Mocks generated by Mockito 5.4.4 from annotations
// in trip_tally/test/generate_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i22;
import 'dart:io' as _i37;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/foundation.dart' as _i11;
import 'package:flutter/material.dart' as _i10;
import 'package:flutter_bloc/flutter_bloc.dart' as _i32;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i34;
import 'package:permission_handler/permission_handler.dart' as _i47;
import 'package:shared_preferences/shared_preferences.dart' as _i9;
import 'package:trip_tally/data/api/api_client.dart' as _i33;
import 'package:trip_tally/data/api/osm_client.dart' as _i52;
import 'package:trip_tally/data/dto/expenses/create_expenses_dto.dart' as _i35;
import 'package:trip_tally/data/dto/expenses/expense_categories_dto.dart' as _i5;
import 'package:trip_tally/data/dto/expenses/expense_dto.dart' as _i55;
import 'package:trip_tally/data/dto/osm_map/osm_response_dto.dart' as _i14;
import 'package:trip_tally/data/dto/trips/create_trip_dto.dart' as _i36;
import 'package:trip_tally/data/dto/trips/get_trips_dto.dart' as _i6;
import 'package:trip_tally/data/dto/trips/trip_dto.dart' as _i7;
import 'package:trip_tally/data/dto/trips/trip_dto_response.dart' as _i8;
import 'package:trip_tally/data/dto/user/create_account_dto.dart' as _i29;
import 'package:trip_tally/data/dto/user/login_dto.dart' as _i28;
import 'package:trip_tally/data/dto/user/update_user_profile_dto.dart' as _i30;
import 'package:trip_tally/domain/data_source/authentication_remote_source.dart' as _i27;
import 'package:trip_tally/domain/data_source/expenses_remote_source.dart' as _i54;
import 'package:trip_tally/domain/data_source/osm_map_data_source.dart' as _i51;
import 'package:trip_tally/domain/data_source/trips_data_source.dart' as _i40;
import 'package:trip_tally/domain/entities/expenses/expense_categories_entity.dart' as _i59;
import 'package:trip_tally/domain/entities/expenses/expense_entity.dart' as _i57;
import 'package:trip_tally/domain/entities/osm_map/place_entity.dart' as _i49;
import 'package:trip_tally/domain/entities/trips/create_trip_entity.dart' as _i44;
import 'package:trip_tally/domain/entities/trips/trip_entity.dart' as _i43;
import 'package:trip_tally/domain/entities/user/create_account_entity.dart' as _i25;
import 'package:trip_tally/domain/entities/user/login_entity.dart' as _i24;
import 'package:trip_tally/domain/entities/user/update_user_profile_entity.dart' as _i26;
import 'package:trip_tally/domain/repositories/authentication_repo.dart' as _i21;
import 'package:trip_tally/domain/repositories/expenses_repo.dart' as _i58;
import 'package:trip_tally/domain/repositories/osm_map_repository.dart' as _i50;
import 'package:trip_tally/domain/repositories/trips_repo.dart' as _i42;
import 'package:trip_tally/domain/use_case/create_account_use_case.dart' as _i38;
import 'package:trip_tally/domain/use_case/create_expense_use_case.dart' as _i56;
import 'package:trip_tally/domain/use_case/create_trip_use_case.dart' as _i45;
import 'package:trip_tally/domain/use_case/delete_trip_use_case.dart' as _i64;
import 'package:trip_tally/domain/use_case/get_all_user_trips_use_case.dart' as _i63;
import 'package:trip_tally/domain/use_case/location_suggestions_use_case.dart' as _i48;
import 'package:trip_tally/domain/use_case/login_use_case.dart' as _i31;
import 'package:trip_tally/domain/use_case/update_user_profile_use_case.dart' as _i53;
import 'package:trip_tally/domain/utils/failure.dart' as _i23;
import 'package:trip_tally/domain/utils/shared_prefs_utils.dart' as _i39;
import 'package:trip_tally/domain/utils/success.dart' as _i3;
import 'package:trip_tally/presentation/pages/authentication_page/authentication_page.dart' as _i41;
import 'package:trip_tally/presentation/pages/authentication_page/bloc/authentication_bloc.dart' as _i4;
import 'package:trip_tally/presentation/pages/create_expenses_page/bloc/create_expenses_bloc.dart' as _i60;
import 'package:trip_tally/presentation/pages/create_expenses_page/bloc/create_expenses_event.dart' as _i61;
import 'package:trip_tally/presentation/pages/create_expenses_page/bloc/create_expenses_state.dart' as _i16;
import 'package:trip_tally/presentation/pages/create_expenses_page/bloc/get_expense_categories_bloc.dart' as _i18;
import 'package:trip_tally/presentation/pages/create_trip_page/bloc/create_trip_bloc.dart' as _i62;
import 'package:trip_tally/presentation/pages/create_trip_page/bloc/create_trip_state.dart' as _i17;
import 'package:trip_tally/presentation/pages/planned_trips_page/bloc/delete_trip_bloc.dart' as _i20;
import 'package:trip_tally/presentation/pages/planned_trips_page/bloc/get_all_user_trips_bloc.dart' as _i19;
import 'package:trip_tally/presentation/pages/welcome_page/bloc/update_user_profile_bloc.dart' as _i15;
import 'package:trip_tally/presentation/utils/permissions/bloc/permissions_bloc.dart' as _i12;
import 'package:trip_tally/presentation/utils/permissions/permission_service.dart' as _i46;
import 'package:trip_tally/presentation/widgets/m3_widgets/maps/osm_bloc/osm_suggestions_cubit.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSuccess_1 extends _i1.SmartFake implements _i3.Success {
  _FakeSuccess_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationState_2 extends _i1.SmartFake implements _i4.AuthenticationState {
  _FakeAuthenticationState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExpenseCategoriesDto_3 extends _i1.SmartFake implements _i5.ExpenseCategoriesDto {
  _FakeExpenseCategoriesDto_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTripsDto_4 extends _i1.SmartFake implements _i6.GetTripsDto {
  _FakeGetTripsDto_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTripDto_5 extends _i1.SmartFake implements _i7.TripDto {
  _FakeTripDto_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTripDtoResponse_6 extends _i1.SmartFake implements _i8.TripDtoResponse {
  _FakeTripDtoResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_7 extends _i1.SmartFake implements _i9.SharedPreferences {
  _FakeSharedPreferences_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_8 extends _i1.SmartFake implements _i10.Widget {
  _FakeWidget_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info}) => super.toString();
}

class _FakeStatelessElement_9 extends _i1.SmartFake implements _i10.StatelessElement {
  _FakeStatelessElement_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info}) => super.toString();
}

class _FakeDiagnosticsNode_10 extends _i1.SmartFake implements _i11.DiagnosticsNode {
  _FakeDiagnosticsNode_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i11.TextTreeConfiguration? parentConfiguration,
    _i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakePermissionsState_11 extends _i1.SmartFake implements _i12.PermissionsState {
  _FakePermissionsState_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOsmSuggestionsState_12 extends _i1.SmartFake implements _i13.OsmSuggestionsState {
  _FakeOsmSuggestionsState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOsmResponseDto_13 extends _i1.SmartFake implements _i14.OsmResponseDto {
  _FakeOsmResponseDto_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateUserProfileState_14 extends _i1.SmartFake implements _i15.UpdateUserProfileState {
  _FakeUpdateUserProfileState_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateExpensesState_15 extends _i1.SmartFake implements _i16.CreateExpensesState {
  _FakeCreateExpensesState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateTripState_16 extends _i1.SmartFake implements _i17.CreateTripState {
  _FakeCreateTripState_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetExpenseCategoriesState_17 extends _i1.SmartFake implements _i18.GetExpenseCategoriesState {
  _FakeGetExpenseCategoriesState_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetAllUserTripsState_18 extends _i1.SmartFake implements _i19.GetAllUserTripsState {
  _FakeGetAllUserTripsState_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTripState_19 extends _i1.SmartFake implements _i20.DeleteTripState {
  _FakeDeleteTripState_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepo extends _i1.Mock implements _i21.AuthenticationRepo {
  MockAuthenticationRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> login(_i24.LoginEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [entity],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #login,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> createAccount(_i25.CreateAccountEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [entity],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #createAccount,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> updateUserProfile(_i26.UpdateUserProfileEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [entity],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #updateUserProfile,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}

/// A class which mocks [AuthenticationRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRemoteSource extends _i1.Mock implements _i27.AuthenticationRemoteSource {
  MockAuthenticationRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i3.Success> login(_i28.LoginDto? loginDto) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [loginDto],
        ),
        returnValue: _i22.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #login,
            [loginDto],
          ),
        )),
      ) as _i22.Future<_i3.Success>);

  @override
  _i22.Future<_i3.Success> createAccount(_i29.CreateAccountDto? createUserDto) => (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [createUserDto],
        ),
        returnValue: _i22.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #createAccount,
            [createUserDto],
          ),
        )),
      ) as _i22.Future<_i3.Success>);

  @override
  _i22.Future<_i3.Success> updateUserProfile(_i30.UpdateUserProfileDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [dto],
        ),
        returnValue: _i22.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #updateUserProfile,
            [dto],
          ),
        )),
      ) as _i22.Future<_i3.Success>);

  @override
  _i22.Future<_i3.Success> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i22.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i22.Future<_i3.Success>);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i31.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> call(_i24.LoginEntity? loginEntity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [loginEntity],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [loginEntity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}

/// A class which mocks [AuthenticationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationBloc extends _i1.Mock implements _i4.AuthenticationBloc {
  MockAuthenticationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AuthenticationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthenticationState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.AuthenticationState);

  @override
  _i22.Stream<_i4.AuthenticationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i4.AuthenticationState>.empty(),
      ) as _i22.Stream<_i4.AuthenticationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i4.AuthenticationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i4.AuthenticationEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i4.AuthenticationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i4.AuthenticationEvent>(
    _i32.EventHandler<E, _i4.AuthenticationState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i4.AuthenticationEvent, _i4.AuthenticationState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i4.AuthenticationState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i33.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i5.ExpenseCategoriesDto> getExpensesCategories() => (super.noSuchMethod(
        Invocation.method(
          #getExpensesCategories,
          [],
        ),
        returnValue: _i22.Future<_i5.ExpenseCategoriesDto>.value(_FakeExpenseCategoriesDto_3(
          this,
          Invocation.method(
            #getExpensesCategories,
            [],
          ),
        )),
      ) as _i22.Future<_i5.ExpenseCategoriesDto>);

  @override
  _i22.Future<_i6.GetTripsDto> getAllUserTrips() => (super.noSuchMethod(
        Invocation.method(
          #getAllUserTrips,
          [],
        ),
        returnValue: _i22.Future<_i6.GetTripsDto>.value(_FakeGetTripsDto_4(
          this,
          Invocation.method(
            #getAllUserTrips,
            [],
          ),
        )),
      ) as _i22.Future<_i6.GetTripsDto>);

  @override
  _i22.Future<_i7.TripDto> getTripById(String? tripId) => (super.noSuchMethod(
        Invocation.method(
          #getTripById,
          [tripId],
        ),
        returnValue: _i22.Future<_i7.TripDto>.value(_FakeTripDto_5(
          this,
          Invocation.method(
            #getTripById,
            [tripId],
          ),
        )),
      ) as _i22.Future<_i7.TripDto>);

  @override
  _i22.Future<String> login(_i28.LoginDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [dto],
        ),
        returnValue: _i22.Future<String>.value(_i34.dummyValue<String>(
          this,
          Invocation.method(
            #login,
            [dto],
          ),
        )),
      ) as _i22.Future<String>);

  @override
  _i22.Future<String> createAccount(_i29.CreateAccountDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [dto],
        ),
        returnValue: _i22.Future<String>.value(_i34.dummyValue<String>(
          this,
          Invocation.method(
            #createAccount,
            [dto],
          ),
        )),
      ) as _i22.Future<String>);

  @override
  _i22.Future<void> createExpenses(_i35.CreateExpensesDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #createExpenses,
          [dto],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  _i22.Future<_i8.TripDtoResponse> createTrip(_i36.CreateTripDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #createTrip,
          [dto],
        ),
        returnValue: _i22.Future<_i8.TripDtoResponse>.value(_FakeTripDtoResponse_6(
          this,
          Invocation.method(
            #createTrip,
            [dto],
          ),
        )),
      ) as _i22.Future<_i8.TripDtoResponse>);

  @override
  _i22.Future<void> updateUserProfile({
    required String? username,
    required String? country,
    required String? defaultCurrencyCode,
    _i37.File? profilePicture,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [],
          {
            #username: username,
            #country: country,
            #defaultCurrencyCode: defaultCurrencyCode,
            #profilePicture: profilePicture,
          },
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  _i22.Future<void> deleteTrip(String? tripId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTrip,
          [tripId],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i9.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i22.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [CreateAccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateAccountUseCase extends _i1.Mock implements _i38.CreateAccountUseCase {
  MockCreateAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> call(_i25.CreateAccountEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}

/// A class which mocks [SharedPrefsUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPrefsUtils extends _i1.Mock implements _i39.SharedPrefsUtils {
  MockSharedPrefsUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.SharedPreferences get prefs => (super.noSuchMethod(
        Invocation.getter(#prefs),
        returnValue: _FakeSharedPreferences_7(
          this,
          Invocation.getter(#prefs),
        ),
      ) as _i9.SharedPreferences);

  @override
  _i22.Future<bool> get removeToken => (super.noSuchMethod(
        Invocation.getter(#removeToken),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [TripsDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripsDataSource extends _i1.Mock implements _i40.TripsDataSource {
  MockTripsDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i7.TripDto> createTrip(_i36.CreateTripDto? dto) => (super.noSuchMethod(
        Invocation.method(
          #createTrip,
          [dto],
        ),
        returnValue: _i22.Future<_i7.TripDto>.value(_FakeTripDto_5(
          this,
          Invocation.method(
            #createTrip,
            [dto],
          ),
        )),
      ) as _i22.Future<_i7.TripDto>);

  @override
  _i22.Future<List<_i7.TripDto>> getAllUserTrips() => (super.noSuchMethod(
        Invocation.method(
          #getAllUserTrips,
          [],
        ),
        returnValue: _i22.Future<List<_i7.TripDto>>.value(<_i7.TripDto>[]),
      ) as _i22.Future<List<_i7.TripDto>>);

  @override
  _i22.Future<_i7.TripDto> getTripById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTripById,
          [id],
        ),
        returnValue: _i22.Future<_i7.TripDto>.value(_FakeTripDto_5(
          this,
          Invocation.method(
            #getTripById,
            [id],
          ),
        )),
      ) as _i22.Future<_i7.TripDto>);

  @override
  _i22.Future<_i3.Success> deleteTrip(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTrip,
          [id],
        ),
        returnValue: _i22.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #deleteTrip,
            [id],
          ),
        )),
      ) as _i22.Future<_i3.Success>);
}

/// A class which mocks [AuthenticationPage].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationPage extends _i1.Mock implements _i41.AuthenticationPage {
  MockAuthenticationPage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Widget build(_i10.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_8(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i10.Widget);

  @override
  _i10.StatelessElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatelessElement_9(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i10.StatelessElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i34.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i11.DiagnosticPropertiesBuilder? properties) => super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i34.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i34.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i11.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i11.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_10(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i11.DiagnosticsNode);

  @override
  List<_i11.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i11.DiagnosticsNode>[],
      ) as List<_i11.DiagnosticsNode>);

  @override
  String toString({_i11.DiagnosticLevel? minLevel = _i11.DiagnosticLevel.info}) => super.toString();
}

/// A class which mocks [TripsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockTripsRepo extends _i1.Mock implements _i42.TripsRepo {
  MockTripsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>> createTrip(_i44.CreateTripEntity? entity) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTrip,
          [entity],
        ),
        returnValue:
            _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>>.value(_FakeEither_0<_i23.Failure, _i43.TripEntity>(
          this,
          Invocation.method(
            #createTrip,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, List<_i43.TripEntity>>> getAllUserTrips() => (super.noSuchMethod(
        Invocation.method(
          #getAllUserTrips,
          [],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, List<_i43.TripEntity>>>.value(
            _FakeEither_0<_i23.Failure, List<_i43.TripEntity>>(
          this,
          Invocation.method(
            #getAllUserTrips,
            [],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, List<_i43.TripEntity>>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>> getTripById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTripById,
          [id],
        ),
        returnValue:
            _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>>.value(_FakeEither_0<_i23.Failure, _i43.TripEntity>(
          this,
          Invocation.method(
            #getTripById,
            [id],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> deleteTrip(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTrip,
          [id],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #deleteTrip,
            [id],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}

/// A class which mocks [CreateTripUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTripUseCase extends _i1.Mock implements _i45.CreateTripUseCase {
  MockCreateTripUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>> call(_i44.CreateTripEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue:
            _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>>.value(_FakeEither_0<_i23.Failure, _i43.TripEntity>(
          this,
          Invocation.method(
            #call,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i43.TripEntity>>);
}

/// A class which mocks [PermissionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsService extends _i1.Mock implements _i46.PermissionsService {
  MockPermissionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i47.PermissionStatus> status(_i47.Permission? permission) => (super.noSuchMethod(
        Invocation.method(
          #status,
          [permission],
        ),
        returnValue: _i22.Future<_i47.PermissionStatus>.value(_i47.PermissionStatus.denied),
      ) as _i22.Future<_i47.PermissionStatus>);

  @override
  _i22.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i22.Future<bool>.value(false),
      ) as _i22.Future<bool>);

  @override
  _i22.Future<_i47.PermissionStatus> request(_i47.Permission? permission) => (super.noSuchMethod(
        Invocation.method(
          #request,
          [permission],
        ),
        returnValue: _i22.Future<_i47.PermissionStatus>.value(_i47.PermissionStatus.denied),
      ) as _i22.Future<_i47.PermissionStatus>);
}

/// A class which mocks [PermissionsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsBloc extends _i1.Mock implements _i12.PermissionsBloc {
  MockPermissionsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.PermissionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePermissionsState_11(
          this,
          Invocation.getter(#state),
        ),
      ) as _i12.PermissionsState);

  @override
  _i22.Stream<_i12.PermissionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i12.PermissionsState>.empty(),
      ) as _i22.Stream<_i12.PermissionsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i12.PermissionsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i12.PermissionsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i12.PermissionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i12.PermissionsEvent>(
    _i32.EventHandler<E, _i12.PermissionsState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i12.PermissionsEvent, _i12.PermissionsState>? transition) => super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i12.PermissionsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationSuggestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationSuggestionsUseCase extends _i1.Mock implements _i48.LocationSuggestionsUseCase {
  MockLocationSuggestionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, List<_i49.PlaceEntity>>> call(String? input) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, List<_i49.PlaceEntity>>>.value(
            _FakeEither_0<_i23.Failure, List<_i49.PlaceEntity>>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, List<_i49.PlaceEntity>>>);
}

/// A class which mocks [OsmSuggestionsCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmSuggestionsCubit extends _i1.Mock implements _i13.OsmSuggestionsCubit {
  MockOsmSuggestionsCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.OsmSuggestionsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeOsmSuggestionsState_12(
          this,
          Invocation.getter(#state),
        ),
      ) as _i13.OsmSuggestionsState);

  @override
  _i22.Stream<_i13.OsmSuggestionsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i13.OsmSuggestionsState>.empty(),
      ) as _i22.Stream<_i13.OsmSuggestionsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i22.Future<List<_i49.PlaceEntity>> getSuggestions(String? query) => (super.noSuchMethod(
        Invocation.method(
          #getSuggestions,
          [query],
        ),
        returnValue: _i22.Future<List<_i49.PlaceEntity>>.value(<_i49.PlaceEntity>[]),
      ) as _i22.Future<List<_i49.PlaceEntity>>);

  @override
  void emit(_i13.OsmSuggestionsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i32.Change<_i13.OsmSuggestionsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);
}

/// A class which mocks [OsmMapRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmMapRepository extends _i1.Mock implements _i50.OsmMapRepository {
  MockOsmMapRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, List<_i49.PlaceEntity>>> getPlaces(String? input) => (super.noSuchMethod(
        Invocation.method(
          #getPlaces,
          [input],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, List<_i49.PlaceEntity>>>.value(
            _FakeEither_0<_i23.Failure, List<_i49.PlaceEntity>>(
          this,
          Invocation.method(
            #getPlaces,
            [input],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, List<_i49.PlaceEntity>>>);
}

/// A class which mocks [OsmMapDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmMapDataSource extends _i1.Mock implements _i51.OsmMapDataSource {
  MockOsmMapDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<List<_i14.FeatureDto>> getPlaces(String? input) => (super.noSuchMethod(
        Invocation.method(
          #getPlaces,
          [input],
        ),
        returnValue: _i22.Future<List<_i14.FeatureDto>>.value(<_i14.FeatureDto>[]),
      ) as _i22.Future<List<_i14.FeatureDto>>);
}

/// A class which mocks [OsmClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockOsmClient extends _i1.Mock implements _i52.OsmClient {
  MockOsmClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i14.OsmResponseDto> getLocationSuggestions({
    required String? input,
    String? format = r'geojson',
    int? addressDetails = 1,
    int? limit = 5,
    String? acceptLanguage = r'en',
    int? polygonSvg = 1,
    int? extraTags = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationSuggestions,
          [],
          {
            #input: input,
            #format: format,
            #addressDetails: addressDetails,
            #limit: limit,
            #acceptLanguage: acceptLanguage,
            #polygonSvg: polygonSvg,
            #extraTags: extraTags,
          },
        ),
        returnValue: _i22.Future<_i14.OsmResponseDto>.value(_FakeOsmResponseDto_13(
          this,
          Invocation.method(
            #getLocationSuggestions,
            [],
            {
              #input: input,
              #format: format,
              #addressDetails: addressDetails,
              #limit: limit,
              #acceptLanguage: acceptLanguage,
              #polygonSvg: polygonSvg,
              #extraTags: extraTags,
            },
          ),
        )),
      ) as _i22.Future<_i14.OsmResponseDto>);
}

/// A class which mocks [UpdateUserProfileUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserProfileUseCase extends _i1.Mock implements _i53.UpdateUserProfileUseCase {
  MockUpdateUserProfileUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> call(_i26.UpdateUserProfileEntity? entity) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entity],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [entity],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}

/// A class which mocks [UpdateUserProfileBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateUserProfileBloc extends _i1.Mock implements _i15.UpdateUserProfileBloc {
  MockUpdateUserProfileBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.UpdateUserProfileState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUpdateUserProfileState_14(
          this,
          Invocation.getter(#state),
        ),
      ) as _i15.UpdateUserProfileState);

  @override
  _i22.Stream<_i15.UpdateUserProfileState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i15.UpdateUserProfileState>.empty(),
      ) as _i22.Stream<_i15.UpdateUserProfileState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i15.UpdateUserProfileEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i15.UpdateUserProfileEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i15.UpdateUserProfileState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i15.UpdateUserProfileEvent>(
    _i32.EventHandler<E, _i15.UpdateUserProfileState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i15.UpdateUserProfileEvent, _i15.UpdateUserProfileState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i15.UpdateUserProfileState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ExpensesRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpensesRemoteSource extends _i1.Mock implements _i54.ExpensesRemoteSource {
  MockExpensesRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i3.Success> createExpenses(List<_i55.ExpenseDto>? dto) => (super.noSuchMethod(
        Invocation.method(
          #createExpenses,
          [dto],
        ),
        returnValue: _i22.Future<_i3.Success>.value(_FakeSuccess_1(
          this,
          Invocation.method(
            #createExpenses,
            [dto],
          ),
        )),
      ) as _i22.Future<_i3.Success>);

  @override
  _i22.Future<_i5.ExpenseCategoriesDto> getExpenseCategories() => (super.noSuchMethod(
        Invocation.method(
          #getExpenseCategories,
          [],
        ),
        returnValue: _i22.Future<_i5.ExpenseCategoriesDto>.value(_FakeExpenseCategoriesDto_3(
          this,
          Invocation.method(
            #getExpenseCategories,
            [],
          ),
        )),
      ) as _i22.Future<_i5.ExpenseCategoriesDto>);
}

/// A class which mocks [CreateExpensesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateExpensesUseCase extends _i1.Mock implements _i56.CreateExpensesUseCase {
  MockCreateExpensesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> call(List<_i57.ExpenseEntity>? entities) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [entities],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [entities],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}

/// A class which mocks [ExpensesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpensesRepo extends _i1.Mock implements _i58.ExpensesRepo {
  MockExpensesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> createExpenses(List<_i57.ExpenseEntity>? entities) =>
      (super.noSuchMethod(
        Invocation.method(
          #createExpenses,
          [entities],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #createExpenses,
            [entities],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i59.ExpenseCategoriesEntity>> getExpenseCategories() => (super.noSuchMethod(
        Invocation.method(
          #getExpenseCategories,
          [],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i59.ExpenseCategoriesEntity>>.value(
            _FakeEither_0<_i23.Failure, _i59.ExpenseCategoriesEntity>(
          this,
          Invocation.method(
            #getExpenseCategories,
            [],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i59.ExpenseCategoriesEntity>>);
}

/// A class which mocks [CreateExpensesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateExpensesBloc extends _i1.Mock implements _i60.CreateExpensesBloc {
  MockCreateExpensesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.CreateExpensesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCreateExpensesState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i16.CreateExpensesState);

  @override
  _i22.Stream<_i16.CreateExpensesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i16.CreateExpensesState>.empty(),
      ) as _i22.Stream<_i16.CreateExpensesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i61.CreateExpensesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i61.CreateExpensesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i16.CreateExpensesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i61.CreateExpensesEvent>(
    _i32.EventHandler<E, _i16.CreateExpensesState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i61.CreateExpensesEvent, _i16.CreateExpensesState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i16.CreateExpensesState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CreateTripBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateTripBloc extends _i1.Mock implements _i62.CreateTripBloc {
  MockCreateTripBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.CreateTripState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCreateTripState_16(
          this,
          Invocation.getter(#state),
        ),
      ) as _i17.CreateTripState);

  @override
  _i22.Stream<_i17.CreateTripState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i17.CreateTripState>.empty(),
      ) as _i22.Stream<_i17.CreateTripState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i62.CreateTripEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i62.CreateTripEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i17.CreateTripState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i62.CreateTripEvent>(
    _i32.EventHandler<E, _i17.CreateTripState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i62.CreateTripEvent, _i17.CreateTripState>? transition) => super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i17.CreateTripState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetExpenseCategoriesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExpenseCategoriesBloc extends _i1.Mock implements _i18.GetExpenseCategoriesBloc {
  MockGetExpenseCategoriesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.GetExpenseCategoriesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGetExpenseCategoriesState_17(
          this,
          Invocation.getter(#state),
        ),
      ) as _i18.GetExpenseCategoriesState);

  @override
  _i22.Stream<_i18.GetExpenseCategoriesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i18.GetExpenseCategoriesState>.empty(),
      ) as _i22.Stream<_i18.GetExpenseCategoriesState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i18.GetExpenseCategoriesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i18.GetExpenseCategoriesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i18.GetExpenseCategoriesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i18.GetExpenseCategoriesEvent>(
    _i32.EventHandler<E, _i18.GetExpenseCategoriesState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i18.GetExpenseCategoriesEvent, _i18.GetExpenseCategoriesState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i18.GetExpenseCategoriesState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetAllUserTripsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllUserTripsBloc extends _i1.Mock implements _i19.GetAllUserTripsBloc {
  MockGetAllUserTripsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i19.GetAllUserTripsState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGetAllUserTripsState_18(
          this,
          Invocation.getter(#state),
        ),
      ) as _i19.GetAllUserTripsState);

  @override
  _i22.Stream<_i19.GetAllUserTripsState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i19.GetAllUserTripsState>.empty(),
      ) as _i22.Stream<_i19.GetAllUserTripsState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i19.GetAllUserTripsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i19.GetAllUserTripsEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i19.GetAllUserTripsState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i19.GetAllUserTripsEvent>(
    _i32.EventHandler<E, _i19.GetAllUserTripsState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i19.GetAllUserTripsEvent, _i19.GetAllUserTripsState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i19.GetAllUserTripsState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetAllUserTripsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllUserTripsUseCase extends _i1.Mock implements _i63.GetAllUserTripsUseCase {
  MockGetAllUserTripsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, List<_i43.TripEntity>>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, List<_i43.TripEntity>>>.value(
            _FakeEither_0<_i23.Failure, List<_i43.TripEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, List<_i43.TripEntity>>>);
}

/// A class which mocks [DeleteTripBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTripBloc extends _i1.Mock implements _i20.DeleteTripBloc {
  MockDeleteTripBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i20.DeleteTripState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeDeleteTripState_19(
          this,
          Invocation.getter(#state),
        ),
      ) as _i20.DeleteTripState);

  @override
  _i22.Stream<_i20.DeleteTripState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i22.Stream<_i20.DeleteTripState>.empty(),
      ) as _i22.Stream<_i20.DeleteTripState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i20.DeleteTripEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i20.DeleteTripEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i20.DeleteTripState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i20.DeleteTripEvent>(
    _i32.EventHandler<E, _i20.DeleteTripState>? handler, {
    _i32.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i32.Transition<_i20.DeleteTripEvent, _i20.DeleteTripState>? transition) => super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i22.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i22.Future<void>.value(),
        returnValueForMissingStub: _i22.Future<void>.value(),
      ) as _i22.Future<void>);

  @override
  void onChange(_i32.Change<_i20.DeleteTripState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DeleteTripUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTripUseCase extends _i1.Mock implements _i64.DeleteTripUseCase {
  MockDeleteTripUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i22.Future<_i2.Either<_i23.Failure, _i3.Success>> call(String? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>.value(_FakeEither_0<_i23.Failure, _i3.Success>(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i22.Future<_i2.Either<_i23.Failure, _i3.Success>>);
}
